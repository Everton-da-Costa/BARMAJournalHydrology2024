#
# =============================================================================
# Clear the work space
rm(list = ls())
# Clear the console
cat("\014")
# -----------------------------------------------------------------------------
# Load functions
# -----------------------------------------------------------------------------
source(here::here("R", "barma.R"))
# Load the Tres Marias dataset containing monthly time series data
# The dataset has two columns:
#   - time: Month names with year (e.g., "Jan 1999")
#   - y: Numeric values representing the time series measurements
tres_marias_data <- read.csv(here::here("data", "itaparica.csv"))
getwd
getwd()
# Load the Tres Marias dataset containing monthly time series data
# The dataset has two columns:
#   - time: Month names with year (e.g., "Jan 1999")
#   - y: Numeric values representing the time series measurements
tres_marias_data <- read.csv(here::here("data", "tres_marias.csv"))
# Load the Sobradinho dataset containing monthly time series data
# The dataset has two columns:
#   - time: Month names with year (e.g., "Jan 1999")
#   - y: Numeric values representing the time series measurements
sobradinho_data <- read.csv(here::here("data", "sobradinho.csv"))
install.packages("renv")
source(here::here("R", "simuBarma.R"))
source(here::here("R", "makeLinkStructure.R"))
source(here::here("R", "barma3ClassicalTestsAuxFun.R"))
source(here::here("R", "barma3ClassicalTests.R"))
# render_classical_tests_report.R
# Render the R Markdown document
rmarkdown::render(
input = "R/analysis/classical_tests_example_1.00.Rmd", # Path to the Rmd source
output_format = "pdf_document",
output_dir = "R/output", # Desired output directory for the PDF
output_file = "classical_tests_example_1.00.pdf" # Desired name for the PDF
)
setwd("~/Dropbox/github/BARMAJournalHydrology2024/analysis")
setwd("~/Dropbox/github/BARMAJournalHydrology2024/analysis")
setwd("~/Dropbox/github/BARMAJournalHydrology2024/analysis")
# Render the R Markdown document
rmarkdown::render(
input = "R/analysis/classical_tests_example_1.00.Rmd", # Path to the Rmd source
output_format = "pdf_document",
output_dir = "R/output", # Desired output directory for the PDF
output_file = "classical_tests_example_1.00.pdf" # Desired name for the PDF
)
setwd("~/Dropbox/github/BARMAJournalHydrology2024/analysis")
# Assuming your working directory is now the project root:
# ~/Dropbox/github/BARMAJournalHydrology2024
rmarkdown::render(
input = "analysis/classical_tests_example_1.00.Rmd", # Path to the Rmd source relative to project root
output_format = "pdf_document",
output_dir = "output", # Desired output directory relative to project root
output_file = "classical_tests_example_1.00.pdf" # Desired name for the PDF
)
setwd("~/Dropbox/github/BARMAJournalHydrology2024/analysis")
# Assuming your working directory is now the project root:
# ~/Dropbox/github/BARMAJournalHydrology2024
rmarkdown::render(
input = "analysis/classical_tests_example_1.00.Rmd", # Path to the Rmd source relative to project root
output_format = "pdf_document",
output_dir = "output", # Desired output directory relative to project root
output_file = "classical_tests_example_1.00.pdf" # Desired name for the PDF
)
setwd("~/Dropbox/github/BARMAJournalHydrology2024/analysis")
getwd()
rmarkdown::render(
input = "analysis/classical_tests_example_1.00.Rmd", # Path to the Rmd source relative to project root
output_format = "pdf_document",
output_dir = "output", # Desired output directory relative to project root
output_file = "classical_tests_example_1.00.pdf" # Desired name for the PDF
)
rmarkdown::render(
input = "classical_tests_example_1.00.Rmd", # The Rmd file is directly in the current directory
output_format = "pdf_document",
output_dir = "../output", # Go up one level (to project root) then into 'output'
output_file = "classical_tests_example_1.00.pdf"
)
rmarkdown::render(
input = "classical_tests_example_1.00.Rmd", # The Rmd file is directly in the current directory
output_format = "pdf_document",
output_dir = "../output", # Go up one level (to project root) then into 'output'
output_file = "classical_tests_example_1.00.pdf"
)
rmarkdown::render(
input = "analysis/classical_tests_example_1.00.Rmd",
output_format = "pdf_document",
output_dir = "output", # Desired output directory relative to project root
output_file = "classical_tests_example_1.00.pdf" # Desired name for the PDF
)
setwd("~/Dropbox/github/BARMAJournalHydrology2024/analysis")
rmarkdown::render(
input = "classical_tests_example_1.00.Rmd",
output_format = "pdf_document",
output_dir = "../output",
output_file = "classical_tests_example_1.00.pdf"
)
# Render the R Markdown document to PDF
rmarkdown::render(
input = "classical_tests_example_1.00.Rmd", # Source Rmd file
output_format = "pdf_document",             # Output format: PDF
output_dir = "../output",                   # Directory for generated PDF
output_file = "classical_tests_example_1.00.pdf" # Name of output PDF file
)
setwd("~/Dropbox/github/BARMAJournalHydrology2024/analysis")
# Render the R Markdown document to PDF
rmarkdown::render(
input = "classical_tests_example_1.00.Rmd", # Source Rmd file
output_format = "pdf_document",             # Output format: PDF
output_dir = "../output",                   # Directory for generated PDF
output_file = "classical_tests_example_1.00.pdf" # Name of output PDF file
)
# Render the R Markdown document to PDF
rmarkdown::render(
input = "classical_tests_example.Rmd", # Source Rmd file
output_format = "pdf_document",             # Output format: PDF
output_dir = "../output",                   # Directory for generated PDF
output_file = "classical_tests_example_1.00.pdf" # Name of output PDF file
)
getwd()
cd ..
cd ..
cd..
setwd("../")
getwd()
# Make sure your working directory is where you expect .gitignore to be
# For example, if it's in your project root:
# setwd("~/Dropbox/github/BARMAJournalHydrology2024")
# Or if you've opened the .Rproj file, RStudio sets it automatically.
# Check using list.files()
if (".gitignore" %in% list.files(all.files = TRUE)) {
message("The .gitignore file exists in the current directory.")
} else {
message("The .gitignore file does NOT exist in the current directory.")
}
# Check using file.exists() - often simpler for a single file
file.exists(".gitignore") # Returns TRUE or FALSE
# Check if .gitignore exists in the current working directory
# The 'all.files = TRUE' argument is crucial because .gitignore is a hidden file.
if (".gitignore" %in% list.files(all.files = TRUE)) {
message("The .gitignore file exists in the current directory.")
} else {
message("The .gitignore file does NOT exist in the current directory.")
}
# Alternatively, to check a specific path:
# file.exists("path/to/your/.gitignore")
# For example, if it should be in your project root:
# file.exists("~/Dropbox/github/BARMAJournalHydrology2024/.gitignore")
setwd("~/Dropbox/github/BARMAJournalHydrology2024/R")
styler:::style_active_file()
source(here::here("R", "simu_barma.R"))
source(here::here("R", "make_link_structure.R"))
source(here::here("R", "barma3_classical_tests.R"))
setwd("~/Dropbox/github/BARMAJournalHydrology2024/analysis")
source(here::here("R", "simu_barma.R"))
source(here::here("R", "make_link_structure.R"))
source(here::here("R", "barma3_classical_tests.R"))
source(here::here("R", "barma_classical_tests.R"))
source(here::here("R", "simu_barma.R"))
source(here::here("R", "make_link_structure.R"))
source(here::here("R", "barma_classical_tests.R"))
source(here::here("R", "inf_matrix_arma.R"))
source(here::here("R", "score_vector_arma.R"))
source(here::here("R", "loglik_terms_ar.R"))
source(here::here("R", "loglik_terms_ma.R"))
source(here::here("R", "simu_barma.R"))
source(here::here("R", "make_link_structure.R"))
source(here::here("R", "barma_classical_tests.R"))
source(here::here("R", "inf_matrix_arma.R"))
source(here::here("R", "score_vector_arma.R"))
source(here::here("R", "loglik_terms_ar.R"))
source(here::here("R", "loglik_terms_ma.R"))
# For reproducibility of the example from Costa, Cribari-Neto and Scher (2024).
seed <- 2
link_function <- "logit"
setwd("~/Dropbox/github/BARMAJournalHydrology2024/analysis")
setwd("~/Dropbox/github/BARMAJournalHydrology2024/analysis")
setwd("~/Dropbox/github/BARMAJournalHydrology2024")
setwd("~/Dropbox/github/BARMAJournalHydrology2024")
usethis::use_description()
# Run this in the console
usethis::use_mit_license("Everton Costa")
usethis::use_package("tseries")
usethis::use_package("forecast")
usethis::use_package("zoo")
usethis::use_package("lbfgs")
usethis::use_package("moments")
usethis::use_package("rmarkdown")
usethis::use_package("here") # It's good practice to add 'here' as well
devtools::document()
# source(here::here("R", "simu_barma.R"))
# source(here::here("R", "make_link_structure.R"))
#
# source(here::here("R", "barma_classical_tests.R"))
#
# source(here::here("R", "inf_matrix_arma.R"))
# source(here::here("R", "score_vector_arma.R"))
# source(here::here("R", "loglik_terms_ar.R"))
# source(here::here("R", "loglik_terms_ma.R"))
# Load all project functions and dependencies
devtools::load_all()
# For reproducibility of the example from Costa, Cribari-Neto and Scher (2024).
seed <- 2
link_function <- "logit"
devtools::load_all()
rm(list = c("barma_classical_tests", "simu_barma"))
devtools::load_all()
# Run this in the console
usethis::use_mit_license("Everton Costa")
# Load all project functions and dependencies
devtools::load_all()
setwd("~/Dropbox/github/BARMAJournalHydrology2024/R")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
rm(list = ls())
devtools::document()
devtools::document()
rm(list = ls());
devtools::document()
rm(list = ls());
devtools::document()
rm(list = ls());
devtools::document()
rm(list = ls());
devtools::document()
usethis::use_citation()
rm(list = ls());
devtools::document()
rm(list = ls());
devtools::document()
rm(list = ls());
devtools::document()
rm(list = ls());
devtools::document()
rm(list = ls());
devtools::document()
rm(list = ls());
devtools::document()
rm(list = ls());
devtools::document()
rm(list = ls());
devtools::document()
rm(list = ls());
devtools::document()
cite(devtools::document())
cite(BARMAJournalHydrology2024)
#' @title Classical Hypothesis Tests in \eqn{\beta}ARMA Models
#' @md
#'
#' @description
#' This R function, `barma_classical_tests`, performs a suite of classical
#' hypothesis tests -- Wald(W), Likelihood Ratio (LR), and Rao Score (RS) --
#' for Beta Autoregressive Moving Average (\eqn{\beta}ARMA) models. These
#' models are particularly useful for doubly-bounded time series, such as
#' those found in hydro-environmental studies (e.g., reservoir useful
#' volumes), which may exhibit seasonality and be subject to abnormal
#' regimes like prolonged droughts.
#'
#' The function is derived from an original BARMA implementation by Fabio M.
#' Bayer and has been significantly refactored and extended by Everton da Costa.
#'
#' @details
#' Key features and considerations based on recent research:
#' * Code structuring adhering to the tidyverse style guide for improved
#'   readability and maintainability.
#' * Implementation validated against the foundational paper:
#'   Rocha, A.V.; Cribari-Neto, F. (2009). Beta autoregressive moving
#'   average models. TEST, 18(3), 529--545. (Erratum: TEST, 26, 2017,
#'   451--459).
#' * This function implements the classical hypothesis tests presented in the
#'   study: Costa, E.; Cribari-Neto, F.; Scher, V.T. (2024). Test inferences
#'   and link function selection in dynamic beta modeling of seasonal
#'   hydro-environmental time series with temporary abnormal regimes.
#'   Journal of Hydrology, 638, 131489.
#'   The study highlights potential inaccuracies in standard LR and Score tests
#'   when the number of individual conditional log-likelihoods differs
#'   between the null and non-null (unrestricted) models. This issue arises
#'   when autoregressive (p) or moving average (q) orders change, affecting
#'   `a = max(p,q)`. To address this, the function provides several test
#'   variants, including the recommended `LR_mfun_res`, `R_mfun_res`, and
#'   `R_exp_mfun_res`, which ensure comparability and lead to more accurate
#'   inferences.
#' * Optimization of the likelihood estimation process using the L-BFGS
#'   algorithm via the `lbfgs` package. (Ensure `lbfgs` is listed in
#'   Imports in DESCRIPTION if this is a package).
#' * Improved computational efficiency by minimizing redundant calculations.
#' * Comprehensive implementation of Wald, Likelihood Ratio, and Rao Score
#'   tests, including several variations, to assess parameter
#'   restrictions (e.g., significance of AR or MA components).
#'
#' @section Authorship and Version:
#' * **Based on the original code by:** Fabio M. Bayer (bayer@ufsm.br),
#'   Date: 2015-10-15
#' * **Modified and improved by:** Everton da Costa (everto.cost@gmail.com),
#'   Date: 2022-02-03
#' * **VERSION:** 1.00
#' * **LAST UPDATE:** 2023-07-27
#'
#' @param y A time series object of class `ts`. Values must be strictly within
#'        the interval (0, 1).
#' @param ar (Optional) A scalar or vector specifying the autoregressive (AR)
#'         orders for the unrestricted model.
#'         Example: `1` for AR(1), `c(1,3)` for AR with lags 1 and 3.
#'         Use `NA` if no AR component is desired.
#' @param ma (Optional) A scalar or vector specifying the moving average (MA)
#'         orders for the unrestricted model.
#'         Example: `1` for MA(1), `c(1,2)` for MA with lags 1 and 2.
#'         Use `NA` if no MA component is desired.
#' @param link A string specifying the link function for the conditional mean.
#'           Supported: `"logit"` (default), `"probit"`,`"cloglog"`,`"loglog"`.
#' @param rest_ar A scalar or vector indicating specific AR lags
#'              (from `ar` of unrestricted model) to restrict to zero
#'              under the null hypothesis.
#'              Example: If `ar = c(1,2)` and `rest_ar = 2`, tests
#'              H0: \eqn{\varphi_2 = 0}.
#'              If `rest_ar = c(1,2)`, tests H0: \eqn{\varphi_1=\varphi_2 = 0}.
#'              Defaults to `NA`.
#' @param rest_ma A scalar or vector indicating specific MA lags
#'              (from `ma` of unrestricted model) to restrict to zero
#'              under the null hypothesis. Similar to `rest_ar`.
#'              Defaults to `NA`.
#'              Note: Typically, either `rest_ar` OR `rest_ma` is specified.
#' @param arma_only A logical value (boolean).
#'              If `FALSE` (default): Performs full procedure: estimates
#'              unrestricted and restricted models, computes all tests.
#'              If `TRUE`: Primarily performs optimization for the specified
#'              BARMA(p,q) model (unrestricted_model output) and SKIPS tests.
#'              Other model/test outputs (e.g., `tests`,
#'              `ar_restricted_model`, `ma_restricted_model`) will be `NULL`
#'              or minimal.
#'
#' @return A list object with the following named elements:
#' \describe{
#'   \item{`unrestricted_model`}{Object (list) with detailed results from
#'                          fitting the full BARMA(p,q) model. Includes
#'                          estimates (`coeff`), SEs, log-likelihood
#'                          (`loglik`), convergence status (`conv`),
#'                          vcov matrix (`arma_vcov`).}
#'   \item{`ar_restricted_model`}{Object (list) with results from fitting a
#'                           BARMA model where AR components (specified by
#'                           `rest_ar` or all AR) are restricted to zero.
#'                           Estimated if AR restrictions are tested. May
#'                           be `NULL`.}
#'   \item{`ma_restricted_model`}{Object (list) with results from fitting a
#'                           BARMA model where MA components (specified by
#'                           `rest_ma` or all MA) are restricted to zero.
#'                           Estimated if MA restrictions are tested. May
#'                           be `NULL`.}
#'   \item{`tests`}{A list with Wald, Likelihood Ratio (LR), and Rao Score
#'             (RS) test results. Populated if `arma_only = FALSE` and
#'             models converge. Sub-elements refer to different
#'             formulations, some addressing issues from Costa et al. (2024)
#'             regarding the number of terms in log-likelihood
#'             (`a = max(p,q)`).
#'             \itemize{
#'               \item `W_res`: Wald test (stat, p-val). `W1` in Costa et
#'                        al. (2024), uses info matrix from unrestricted
#'                        model.
#'               \item `W2_res`: Alt. Wald test (stat, p-val). `W2` in
#'                         Costa et al. (2024), uses info matrix from
#'                         restricted model estimated with equal likelihood
#'                         terms (`mat_vcov_mfun`).
#'               \item `LR_naive_res`: "Naive" LR test (stat, p-val,
#'                               loglik_restr). `LR1` in Costa et al. (2024).
#'                               Uses `loglik_restr_naive` from restricted
#'                               model estimated with its own `a_N`. Can be
#'                               inaccurate or negative if `a_N < a_NN`.
#'               \item `LR_m0_res`: LR test (stat, p-val, loglik_restr
#'                            `loglik_restr_m0`). `LR2` from Costa
#'                            et al. (2024) if `loglik_restr_m0` is an
#'                            adjusted sum.
#'               \item `LR_mfun_res`: Recommended LR test (stat, p-val,
#'                              loglik_restr `loglik_restr_mfun`). `LR3` in
#'                              Costa et al. (2024). `loglik_restr_mfun`
#'                              from restricted model using `a_NN` (from
#'                              unrestricted model) for equal terms in
#'                              log-likelihoods. Non-negative.
#'               \item `R_naive_res`: "Naive" Rao Score (reduced form)
#'                              (stat, p-val). `Sr*` in Costa et al. (2024).
#'                              Uses `score_vec_naive`, `mat_vcov_naive`
#'                              from restricted model with its own `a_N`.
#'               \item `R_expanded_res`: "Naive" Rao Score (extended)
#'                                 (stat, p-val). `Se*` in Costa et al.
#'                                 (2024). Uses `score_vec_naive`,
#'                                 `mat_vcov_naive` from restricted model
#'                                 with its own `a_N`.
#'               \item `R_mfun_res`: Recommended Score (reduced) (stat,
#'                             p-val). `Sr` in Costa et al. (2024). Uses
#'                             `score_vec_mfun`, `mat_vcov_mfun` from
#'                             restricted model using `a_NN`.
#'               \item `R_exp_mfun_res`: Recommended Score (extended)
#'                                 (stat, p-val). `Se` in Costa et al.
#'                                 (2024). Uses `score_vec_mfun`,
#'                                 `mat_vcov_mfun` from restricted model
#'                                 using `a_NN`.
#'             }
#'             (Each result typically includes test statistic and p-value.
#'             DF for chi-squared tests is `num_rest`).
#'   }
#' }
#'
#' @references
#' Costa, E., Cribari-Neto, F., & Scher, V. T. (2024). Test inferences and link function selection in dynamic beta modeling of seasonal hydro-environmental time series with temporary abnormal regimes. *Journal of Hydrology*, 638, 131489. \doi{10.1016/j.jhydrol.2024.131489}.
#'
#' Rocha, A. V., & Cribari-Neto, F. (2009). Beta autoregressive moving average models. *TEST*, 18(3), 529-545. \doi{10.1007/s11749-008-0112-z}. (Erratum: *TEST*, 26, 451-459, 2017).
#'
#' @seealso
#' To get the formal citation for this package, run:
#' `citation("BARMAJournalHydrology2024")`.
#'
#' @examples
#' \dontrun{
#' # Assuming 'y' is a time series object (ts) with values in (0,1)
#' # Example: Test significance of AR(1) and MA(1) components
#' # in a BARMA(1,1) model.
#'
#' # To test AR components (H0: varphi_1 = 0)
#' # Note: This requires the actual barma_classical_tests function and its
#' # dependencies to be available and working.
#' # results_test_ar <- barma_classical_tests(y = y, ar = 1, ma = 1,
#' #                                        link = "logit", rest_ar = 1)
#' # print(results_test_ar$tests)
#'
#' # To test MA components (H0: theta_1 = 0)
#' # results_test_ma <- barma_classical_tests(y = y, ar = 1, ma = 1,
#' #                                        link = "logit", rest_ma = 1)
#' # print(results_test_ma$tests)
#'
#' # To estimate model without running specific tests (if arma_only = TRUE)
#' # model_only <- barma_classical_tests(y = y, ar = 1, ma = 1,
#' #                                   link = "logit", arma_only = TRUE)
#' # print(model_only$unrestricted_model)
#' }
#'
#' @keywords ts models regression
#' @export
barma_classical_tests <- function(y, .. ) { ... }
2022 - 2018
683 / (2022 - 2018)
683 / (2022 - 2018)
517 / (2025 - 2023)
(2025 - 2023)
round(517 / (2025 - 2023))
taxa antiga  = 683 / 60
taxa_antiga  = 683 / 60
taxa_antiga
taxa_atual  =517 / 29
taxa_atual
Variação = ( (taxa_atual - taxa_antiga) / taxa_antiga ) * 100
Variação
rm(list = ls())
devtools::document()
roxygen2::roxygenise()
400 / 30
rm(list = ls())
devtools::document()
roxygen2::roxygenise()
rm(list = ls())
devtools::document()
?devtools
?devtools
setwd("~/Dropbox/github/BARMAJournalHydrology2024")
setwd("~/Dropbox/github/BARMAJournalHydrology2024");
rm(list = ls()); devtools::document()
?barma_classical_tests
setwd("~/Dropbox/github/BARMAJournalHydrology2024");
rm(list = ls());
devtools::document();
?barma_classical_tests
citation("BARMAJournalHydrology2024")
setwd("~/Dropbox/github/BARMAJournalHydrology2024");
rm(list = ls());
devtools::document();
?barma_classical_tests
setwd("~/Dropbox/github/BARMAJournalHydrology2024");
rm(list = ls());
devtools::document();
?barma_classical_tests
devtools::install()
devtools::install()
setwd("~/Dropbox/github/BARMAJournalHydrology2024");
rm(list = ls());
devtools::document();
?barma_classical_tests
devtools::install()
setwd("~/Dropbox/github/BARMAJournalHydrology2024");
rm(list = ls());
devtools::document();
?barma_classical_tests
devtools::install()
setwd("~/Dropbox/github/BARMAJournalHydrology2024");
rm(list = ls());
devtools::document();
?barma_classical_tests
devtools::install()
setwd("~/Dropbox/github/BARMAJournalHydrology2024");
rm(list = ls());
devtools::document();
?barma_classical_tests
devtools::install()
.Last.error
64000/ 12
