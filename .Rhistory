y_test_ts = y_test_ts[1:n],
BARMA = fit_BARMA$forecast[1:n],
SARIMA = forecast(fit_SARIMA)$mean[1:n],
SARIMAX = fit_SARIMAX_prev[1:n],
ETS = forecast(fit_ETS)$mean[1:n],
month = factor(months)
) %>%
mutate(time = 1:n)
setwd("~/Dropbox/github/BARMAJournalHydrology2024")
styler:::style_selection()
styler:::style_active_file()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width = 9,
fig.height = 4,
fig.align = "center",
warning = FALSE,
message = FALSE
)
library(BARMAJournalHydrology2024)
library(forecast) # time series
library(ggplot2) # plotting
library(zoo) # yearmon handling
library(gridExtra) # grid.arrange for plots
library(dplyr)
print(descriptive_df)
knitr::kable(
descriptive_df,
caption =
"Descriptive Statistics of the Itaparica Reservoir's Useful Volume."
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width = 9,
fig.height = 4,
fig.align = "center",
warning = FALSE,
message = FALSE
)
library(BARMAJournalHydrology2024)
library(forecast) # time series
library(ggplot2) # plotting
library(zoo) # yearmon handling
library(gridExtra) # grid.arrange for plots
library(dplyr)
# Series size and end time
sample_size <- length(itaparica_ts)
end_time_series <- time(itaparica_ts)[sample_size] + 1
# Size font of the plot
ggplot_size_font <- 12
ggplot_size_font_forecast <- 9
# ggplot theme
ggplot_theme <- theme(
legend.position = "bottom",
title = element_text(size = ggplot_size_font),
axis.text = element_text(size = ggplot_size_font),
axis.title = element_text(size = ggplot_size_font),
legend.text = element_text(size = ggplot_size_font),
legend.title = element_text(size = ggplot_size_font)
)
# ggplot theme forecast plot
ggplot_theme_forecast <- theme(
legend.position = "right",
title = element_text(size = ggplot_size_font_forecast),
axis.text = element_text(size = ggplot_size_font_forecast),
axis.title = element_text(size = ggplot_size_font_forecast),
legend.text = element_text(size = ggplot_size_font_forecast),
legend.title = element_text(size = ggplot_size_font_forecast)
)
# y-axis scale
ggplot_scale_y <-
scale_y_continuous(
breaks = seq(0.1, 1.00, 0.10),
limits = c(0.1, 1.0)
)
# x-axis scale
ggplot_scale_x <- scale_x_continuous(
breaks = seq(1999, end_time_series, 2),
limits = c(1999, end_time_series)
)
# Monthly seasonality plot
ggmonthplot_itaparica_ts <- ggmonthplot(itaparica_ts) +
ylab(" ") +
xlab("Month") +
ggplot_scale_y +
ggplot_theme
print(ggmonthplot_itaparica_ts)
# Time series plot
ggplot_itaparica <- ggplot(itaparica_df, aes(time, y)) +
geom_point() +
geom_line(aes(group = 1)) +
ggplot_scale_x +
ggplot_scale_y +
ggplot_theme +
guides(colour = guide_legend(title = "Temporary regimes"))
print(ggplot_itaparica)
# -------------------------------------------------------------------------- #
# Create data frame with abnormal period dummy
# -------------------------------------------------------------------------- #
time_vector <- seq(
time(itaparica_ts)[1],
time(itaparica_ts)[sample_size],
1 / 12
)
time_vector_yearmon <- as.yearmon(time_vector)
itaparica_ggplot_df <- data.frame(
time = time_vector_yearmon,
y = itaparica_ts
)
end_train_date <- as.yearmon("2024-06")
# Abnormal period definition
start_dap <- as.yearmon("2012-10")
end_dap <- as.yearmon("2020-05")
dap_time <- (itaparica_ggplot_df$time >= start_dap &
itaparica_ggplot_df$time <= end_dap)
dap <- as.numeric(dap_time)
# Labeling regimes
itaparica_ggplot_df$dap <- dap
itaparica_ggplot_df$colour1 <- ifelse(itaparica_ggplot_df$dap == 0,
"Normal", "Abnormal"
)
# Plot abnormal periods
ggplot_abnormal_period <- ggplot(
itaparica_ggplot_df,
aes(time, y, colour = colour1)
) +
geom_point() +
geom_line(aes(group = 1)) +
ggplot_scale_x +
ggplot_scale_y +
ggplot_theme +
guides(colour = guide_legend(title = "Temporary regimes"))
print(ggplot_abnormal_period)
# -------------------------------------------------------------------------- #
# Autocorrelation function (ACF) plot
# -------------------------------------------------------------------------- #
ggacf_plot <- ggAcf(itaparica_ts) +
ggtitle(" ") +
xlab("Lag") +
ylab("ACF")
print(ggacf_plot)
# -------------------------------------------------------------------------- #
# Partial autocorrelation function (PACF) plot
# -------------------------------------------------------------------------- #
ggpacf_plot <- ggPacf(itaparica_ts) +
ggtitle(" ") +
xlab("Lag") +
ylab("PACF")
print(ggpacf_plot)
# -------------------------------------------------------------------------- #
# Descriptive statistics: Useful volume of the Itaparica reservoir
# -------------------------------------------------------------------------- #
descriptive_df <- data.frame(
min             = min(itaparica_ts),
max             = max(itaparica_ts),
median          = median(itaparica_ts),
mean            = mean(itaparica_ts),
sd              = sd(itaparica_ts),
skewness        = moments::skewness(itaparica_ts),
excess_kurtosis = moments::kurtosis(itaparica_ts)
)
# Round to two decimals
descriptive_df <- round(descriptive_df, 2)
print(descriptive_df)
knitr::kable(
descriptive_df,
caption =
"Descriptive Statistics of the Itaparica Reservoir's Useful Volume."
)
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
# print(ggpacf_plot)
grid.arrange(
ggplot_itaparica,
ggacf_plot,
ggpacf_plot,
layout_matrix = rbind(c(1, 1), c(2, 3))
)
# print(ggpacf_plot)
grid.arrange(
ggplot_itaparica,
ggacf_plot,
ggpacf_plot,
layout_matrix = rbind(c(1, 1), c(2, 3))
)
# print(ggpacf_plot)
grid.arrange(
ggplot_itaparica,
ggacf_plot,
ggpacf_plot,
layout_matrix = rbind(c(1, 1), c(2, 3))
)
# print(ggpacf_plot)
grid.arrange(
ggplot_itaparica,
ggacf_plot,
ggpacf_plot,
layout_matrix = rbind(c(1, 1), c(2, 3))
)
# print(ggpacf_plot)
grid.arrange(
ggplot_itaparica,
ggacf_plot,
ggpacf_plot,
layout_matrix = rbind(c(1, 1), c(2, 3))
)
# print(ggpacf_plot)
grid.arrange(
ggplot_itaparica,
ggacf_plot,
ggpacf_plot,
layout_matrix = rbind(c(1, 1), c(2, 3))
)
# -------------------------------------------------------------------------- #
# Time series plot
# -------------------------------------------------------------------------- #
ggplot_itaparica <- ggplot(itaparica_df, aes(time, y)) +
geom_point() +
geom_line(aes(group = 1)) +
ggplot_scale_x +
ggplot_scale_y +
ggplot_theme +
guides(colour = guide_legend(title = "Temporary regimes"))
# -------------------------------------------------------------------------- #
# Autocorrelation function (ACF) plot
# -------------------------------------------------------------------------- #
ggacf_plot <- ggAcf(itaparica_ts) +
ggtitle(" ") +
xlab("Lag") +
ylab("ACF")
# -------------------------------------------------------------------------- #
# Partial autocorrelation function (PACF) plot
# -------------------------------------------------------------------------- #
ggpacf_plot <- ggPacf(itaparica_ts) +
ggtitle(" ") +
xlab("Lag") +
ylab("PACF")
# -------------------------------------------------------------------------- #
# Grid all plots
# -------------------------------------------------------------------------- #
ggplot_acf_pacf_itaparica <- grid.arrange(
ggplot_itaparica,
ggacf_plot,
ggpacf_plot,
layout_matrix = rbind(c(1, 1), c(2, 3))
)
print(ggplot_acf_pacf_itaparica)
print(ggplot_acf_pacf_itaparica)
print(ggplot_acf_pacf_itaparica)
# -------------------------------------------------------------------------- #
# Grid all plots
# -------------------------------------------------------------------------- #
ggplot_acf_pacf_itaparica <- grid.arrange(
ggplot_itaparica,
ggacf_plot,
ggpacf_plot,
layout_matrix = rbind(c(1, 1), c(2, 3))
)
# -------------------------------------------------------------------------- #
# Grid all plots
# -------------------------------------------------------------------------- #
ggplot_acf_pacf_itaparica <- grid.arrange(
ggplot_itaparica,
ggacf_plot,
ggpacf_plot,
layout_matrix = rbind(c(1, 1), c(2, 3))
)
ggseasonplot(itaparica_ts)
# Seasonality plot by year
ggseasonplot_itaparica_ts <- ggseasonplot(itaparica_ts) +
ylab(" ") +
xlab("Month") +
ggplot_scale_y +
ggplot_theme
print(ggseasonplot_itaparica_ts)
# Seasonality plot by year
ggseasonplot_itaparica_ts <- ggseasonplot(itaparica_ts) +
ylab(" ") +
xlab("Month") +
ggplot_scale_y +
ggplot_theme +
theme(legend.position = "right")
print(ggseasonplot_itaparica_ts)
# -------------------------------------------------------------------------- #
# Time series plot
# -------------------------------------------------------------------------- #
ggplot_data_simulation <- ggplot(itaparica_df, aes(time, y)) +
geom_point() +
geom_line(aes(group = 1)) +
ggplot_scale_x +
ggplot_scale_y +
ggplot_theme
print(ggplot_data_simulation)
# -------------------------------------------------------------------------- #
# Time series plot
# -------------------------------------------------------------------------- #
ggplot_data_simulation <- ggplot(y, aes(time, y)) +
geom_point() +
geom_line(aes(group = 1)) +
ggplot_scale_x +
ggplot_scale_y +
ggplot_theme
print(ggplot_data_simulation)
# -------------------------------------------------------------------------- #
# Time series plot
# -------------------------------------------------------------------------- #
ggplot_data_simulation <- ggplot(y, aes(time, y)) +
geom_point() +
geom_line(aes(group = 1)) +
# ggplot_scale_x +
ggplot_scale_y +
ggplot_theme
n <- 250
alpha_true <- 0
varphi_true <- 0.4
theta_true <- NA # Implies no MA part in simu_barma
phi_true <- 20
set.seed(seed) # Ensure reproducibility for this specific simulation
y <- simu_barma(
n = n,
alpha = alpha_true,
varphi = varphi_true,
theta = theta_true,
phi = phi_true,
link = link_function
)
plot(as.numeric(y),
xaxt = "n", yaxt = "n",
xlab = "Time", ylab = "y",
ylim = c(0, 1),
type = "l",
)
# Adjust the axis values.
axis(1, seq(0, n, by = 50), )
axis(2, seq(0, 1, 0.2))
# For reproducibility of the example from Costa, Cribari-Neto and Scher (2024).
seed <- 2
link_function <- "logit"
n <- 250
alpha_true <- 0
varphi_true <- 0.4
theta_true <- NA # Implies no MA part in simu_barma
phi_true <- 20
set.seed(seed) # Ensure reproducibility for this specific simulation
y <- simu_barma(
n = n,
alpha = alpha_true,
varphi = varphi_true,
theta = theta_true,
phi = phi_true,
link = link_function
)
plot(as.numeric(y),
xaxt = "n", yaxt = "n",
xlab = "Time", ylab = "y",
ylim = c(0, 1),
type = "l",
)
# Adjust the axis values.
axis(1, seq(0, n, by = 50), )
axis(2, seq(0, 1, 0.2))
# -------------------------------------------------------------------------- #
# Time series plot
# -------------------------------------------------------------------------- #
ggplot_data_simulation <- ggplot(y, aes(time, y)) +
geom_point() +
geom_line(aes(group = 1)) +
# ggplot_scale_x +
ggplot_scale_y +
ggplot_theme
print(ggplot_data_simulation)
y
time(y)
# -------------------------------------------------------------------------- #
# Time series plot
# -------------------------------------------------------------------------- #
ggplot_data_simulation <- ggplot(y, aes(time, y)) +
geom_point() +
# geom_line(aes(group = 1)) +
# ggplot_scale_x +
# ggplot_scale_y +
ggplot_theme
print(ggplot_data_simulation)
seq_len(y)
y
length(y)
seq_along(y)
y_df <- data.frame(y, seq_along(y))
y_df
# -------------------------------------------------------------------------- #
# Time series plot
# -------------------------------------------------------------------------- #
y_df <- data.frame(y = y, obs = seq_along(y))
ggplot_data_simulation <- ggplot(y_df, aes(obs, y)) +
geom_point() +
geom_line(aes(group = 1)) +
ggplot_scale_x +
ggplot_scale_y +
ggplot_theme
print(ggplot_data_simulation)
# -------------------------------------------------------------------------- #
# Time series plot
# -------------------------------------------------------------------------- #
y_df <- data.frame(y = y, obs = seq_along(y))
ggplot_data_simulation <- ggplot(y_df, aes(obs, y)) +
geom_point() +
geom_line(aes(group = 1)) +
# ggplot_scale_x +
ggplot_scale_y +
ggplot_theme
print(ggplot_data_simulation)
# -------------------------------------------------------------------------- #
# Time series plot
# -------------------------------------------------------------------------- #
y_df <- data.frame(y = y, years = seq_along(y))
ggplot_data_simulation <- ggplot(y_df, aes(years, y)) +
geom_point() +
geom_line(aes(group = 1)) +
ggplot_scale_y +
ggplot_theme
print(ggplot_data_simulation)
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
# -------------------------------------------------------------------------- #
# Time series plot
# -------------------------------------------------------------------------- #
y_df <- data.frame(y = y, years = seq_along(y))
ggplot_data_simulation <- ggplot(y_df, aes(years, y)) +
geom_point() +
geom_line(aes(group = 1)) +
ggplot_scale_y +
scale_x_continuous(
breaks = seq(0, 250, 12),
limits = c(0, 12)
) +
ggplot_theme
print(ggplot_data_simulation)
eq_along(y)
seq_along(y)
y_df
# -------------------------------------------------------------------------- #
# Time series plot
# -------------------------------------------------------------------------- #
y_df <- data.frame(y = y, years = seq_along(y))
ggplot_data_simulation <- ggplot(y_df, aes(years, y)) +
geom_point() +
geom_line(aes(group = 1)) +
ggplot_scale_y +
scale_x_continuous(
breaks = seq(0, 250, 12),
limits = c(0, 250)
) +
ggplot_theme
print(ggplot_data_simulation)
setwd("~/Dropbox/github/BARMAJournalHydrology2024")
usethis::use_data_raw()
?usethis::usedata()
?usethis::use_data()
rm(list = ls())
getwd()
list.files()
devtools::load_all()
devtools::unload()
devtools::install()
devtools::document()
devtools::check()
library(BARMAJournalHydrology2024)
?barma_classical_tests
rm(list = ls())
getwd()
list.files()
devtools::load_all()
devtools::unload()
devtools::install()
devtools::document()
devtools::check()
library(BARMAJournalHydrology2024)
?barma_classical_tests
rm(list = ls())
getwd()
list.files()
devtools::load_all()
devtools::unload()
devtools::install()
devtools::document()
devtools::check()
library(BARMAJournalHydrology2024)
?barma_classical_tests
rm(list = ls())
getwd()
list.files()
devtools::load_all()
devtools::unload()
devtools::install()
devtools::document()
devtools::check()
library(BARMAJournalHydrology2024)
?barma_classical_tests
rm(list = ls())
getwd()
list.files()
devtools::load_all()
devtools::unload()
devtools::install()
devtools::document()
devtools::check()
library(BARMAJournalHydrology2024)
?barma_classical_tests
